package com.github.mperry.fg.euler

import fj.F2
import fj.data.Stream
import groovy.transform.TypeChecked
import org.junit.Test

/*
 * Each new term in the Fibonacci sequence is generated by adding the previous two
 * terms. By starting with 1 and 2, the first 10 terms will be:
 *
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed
 * four million, find the sum of the even-valued terms.
 *
 */
class P02 extends GroovyTestCase {

	Stream<Integer> fibMethodUnchecked(int a, int b) {
		Stream.cons(a, (this.&fibMethodChecked as F2).curry().f(b).lazy().f(a + b))
	}

	@TypeChecked
	Stream<Integer> fibMethodChecked(int a, int b) {
		def f = (this.&fibMethodChecked as F2<Integer, Integer, Stream<Integer>>)
		Stream.cons(a, f.curry().f(b).lazy().f(a + b))
	}

	Closure<Stream<Integer>> fibCUnchecked = { int a, int b ->
		Stream.cons(a, (fibCUnchecked as F2).curry().f(b).lazy().f(a + b))
	}

//	@TypeChecked
	// Groovyc with TypeChecked returns error: Unimplemented node type
	Closure<Stream<Integer>> fibCChecked = { int a, int b ->
		Stream.cons(a, (fibCChecked as F2<Integer, Integer, Stream<Integer>>).curry().f(b).lazy().f(a + b))
	}

	Stream<Integer> fib() {
		fibMethodChecked(1, 2)
	}

	@Test
	@TypeChecked
	void test1() {
		def max = 4 * 10 ** 6
		def r = fib().takeWhile{ int it -> it < max }.filter{ int it -> it % 2 == 0 }.sum()
		println r
		assertTrue(r == 4613732)
	}

}
